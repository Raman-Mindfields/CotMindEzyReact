{"ast":null,"code":"import { getMimeType } from './mimes';\nimport { resourceToDataURL } from './dataurl';\nimport { clonePseudoElements } from './clone-pseudos';\nimport { createImage, toArray } from './util';\n\nasync function cloneCanvasElement(canvas) {\n  const dataURL = canvas.toDataURL();\n\n  if (dataURL === 'data:,') {\n    return canvas.cloneNode(false);\n  }\n\n  return createImage(dataURL);\n}\n\nasync function cloneVideoElement(video, options) {\n  const poster = video.poster;\n  const contentType = getMimeType(poster);\n  const dataURL = await resourceToDataURL(poster, contentType, options);\n  return createImage(dataURL);\n}\n\nasync function cloneSingleNode(node, options) {\n  if (node instanceof HTMLCanvasElement) {\n    return cloneCanvasElement(node);\n  }\n\n  if (node instanceof HTMLVideoElement && node.poster) {\n    return cloneVideoElement(node, options);\n  }\n\n  return node.cloneNode(false);\n}\n\nconst isSlotElement = node => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\n\nasync function cloneChildren(nativeNode, clonedNode, options) {\n  var _a;\n\n  const children = isSlotElement(nativeNode) && nativeNode.assignedNodes ? toArray(nativeNode.assignedNodes()) : toArray(((_a = nativeNode.shadowRoot) !== null && _a !== void 0 ? _a : nativeNode).childNodes);\n\n  if (children.length === 0 || nativeNode instanceof HTMLVideoElement) {\n    return clonedNode;\n  }\n\n  await children.reduce((deferred, child) => deferred.then(() => cloneNode(child, options)).then(clonedChild => {\n    if (clonedChild) {\n      clonedNode.appendChild(clonedChild);\n    }\n  }), Promise.resolve());\n  return clonedNode;\n}\n\nfunction cloneCSSStyle(nativeNode, clonedNode) {\n  const targetStyle = clonedNode.style;\n\n  if (!targetStyle) {\n    return;\n  }\n\n  const sourceStyle = window.getComputedStyle(nativeNode);\n\n  if (sourceStyle.cssText) {\n    targetStyle.cssText = sourceStyle.cssText;\n    targetStyle.transformOrigin = sourceStyle.transformOrigin;\n  } else {\n    toArray(sourceStyle).forEach(name => {\n      let value = sourceStyle.getPropertyValue(name);\n\n      if (name === 'font-size' && value.endsWith('px')) {\n        const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;\n        value = `${reducedFont}px`;\n      }\n\n      targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));\n    });\n  }\n}\n\nfunction cloneInputValue(nativeNode, clonedNode) {\n  if (nativeNode instanceof HTMLTextAreaElement) {\n    clonedNode.innerHTML = nativeNode.value;\n  }\n\n  if (nativeNode instanceof HTMLInputElement) {\n    clonedNode.setAttribute('value', nativeNode.value);\n  }\n}\n\nfunction cloneSelectValue(nativeNode, clonedNode) {\n  if (nativeNode instanceof HTMLSelectElement) {\n    const clonedSelect = clonedNode;\n    const selectedOption = Array.from(clonedSelect.children).find(child => nativeNode.value === child.getAttribute('value'));\n\n    if (selectedOption) {\n      selectedOption.setAttribute('selected', '');\n    }\n  }\n}\n\nfunction decorate(nativeNode, clonedNode) {\n  if (clonedNode instanceof Element) {\n    cloneCSSStyle(nativeNode, clonedNode);\n    clonePseudoElements(nativeNode, clonedNode);\n    cloneInputValue(nativeNode, clonedNode);\n    cloneSelectValue(nativeNode, clonedNode);\n  }\n\n  return clonedNode;\n}\n\nexport async function cloneNode(node, options, isRoot) {\n  if (!isRoot && options.filter && !options.filter(node)) {\n    return null;\n  }\n\n  return Promise.resolve(node).then(clonedNode => cloneSingleNode(clonedNode, options)).then(clonedNode => cloneChildren(node, clonedNode, options)).then(clonedNode => decorate(node, clonedNode));\n}","map":{"version":3,"mappings":"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","names":["getMimeType","resourceToDataURL","clonePseudoElements","createImage","toArray","cloneCanvasElement","canvas","dataURL","toDataURL","cloneNode","cloneVideoElement","video","options","poster","contentType","cloneSingleNode","node","HTMLCanvasElement","HTMLVideoElement","isSlotElement","tagName","toUpperCase","cloneChildren","nativeNode","clonedNode","children","assignedNodes","shadowRoot","_a","childNodes","length","reduce","deferred","child","then","clonedChild","appendChild","Promise","resolve","cloneCSSStyle","targetStyle","style","sourceStyle","window","getComputedStyle","cssText","transformOrigin","forEach","name","value","getPropertyValue","endsWith","reducedFont","Math","floor","parseFloat","substring","setProperty","getPropertyPriority","cloneInputValue","HTMLTextAreaElement","innerHTML","HTMLInputElement","setAttribute","cloneSelectValue","HTMLSelectElement","clonedSelect","selectedOption","Array","from","find","getAttribute","decorate","Element","isRoot","filter"],"sourceRoot":"","sources":["../src/clone-node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}