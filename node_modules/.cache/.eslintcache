[{"R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\index.js":"1","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\App.js":"2","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\reportWebVitals.js":"3","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\layout\\Layout.js":"4","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\pages\\report\\Report.js":"5","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\services\\AxiosOrder.js":"6","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\services\\Api.js":"7"},{"size":503,"mtime":1662661240635,"results":"8","hashOfConfig":"9"},{"size":769,"mtime":1663175611633,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1653644863836,"results":"11","hashOfConfig":"9"},{"size":1535,"mtime":1663176718609,"results":"12","hashOfConfig":"9"},{"size":56436,"mtime":1663176137456,"results":"13","hashOfConfig":"9"},{"size":761,"mtime":1663573156780,"results":"14","hashOfConfig":"9"},{"size":234,"mtime":1663176154597,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1dntmk9",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\index.js",[],["33","34"],"R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\App.js",["35"],"import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport Layout from \"./layout/Layout\";\nimport Report from \"./pages/report/Report\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <QueryClientProvider client={queryClient}>\n        <BrowserRouter>\n          <Switch>\n            <Layout>\n              <Route path=\"/report/:reportId\" component={Report} />\n            </Layout>\n          </Switch>\n        </BrowserRouter>\n      </QueryClientProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\reportWebVitals.js",[],"R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\layout\\Layout.js",[],"R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\pages\\report\\Report.js",["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"import React, { useEffect, useState } from \"react\";\nimport { useQuery } from 'react-query';\n\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from \"@mui/material/Switch\";\nimport { alpha, styled } from '@mui/material/styles';\n\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsTreeChart from \"highcharts/modules/treemap\";\nimport HighchartsHeatmap from \"highcharts/modules/heatmap\";\nimport highcharts3d from \"highcharts/highcharts-3d\";\nimport sankey from \"highcharts/modules/sankey.js\";\nimport organization from \"highcharts/modules/organization.js\";\n\nimport GetAppIcon from \"@mui/icons-material/GetApp\";\nimport PersonIcon from '@mui/icons-material/Person';\nimport ProjectIcon from '@mui/icons-material/AppSettingsAlt';\nimport ToolIcon from '@mui/icons-material/Build';\nimport OverallScoreIcon from '@mui/icons-material/SportsScore';\nimport RunRulesIcon from '@mui/icons-material/Rule';\n\nimport { Card } from \"react-bootstrap\";\nimport { TextField, MenuItem, Grid, Typography, Container, Chip } from \"@mui/material\";\nimport \"./report.css\";\nimport axios from \"../../services/AxiosOrder\"\n/* ES6 */\nimport * as htmlToImage from \"html-to-image\";\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TablePagination from '@mui/material/TablePagination'\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { visuallyHidden } from '@mui/utils';\nimport { chunk, orderBy as lodashOrderBy } from 'lodash';\nimport { useParams } from \"react-router-dom\";\n\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\n\nimport {\n  withStyles,\n} from \"@mui/styles\";\nimport { getReportData } from \"../../services/Api\";\n\nhighcharts3d(Highcharts);\nsankey(Highcharts);\norganization(Highcharts);\nHighchartsHeatmap(Highcharts);\nHighchartsTreeChart(Highcharts);\n\nconst CssTextField = withStyles({\n  root: {\n    \"& label.Mui-focused\": {\n      color: \"#25b3c2\",\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#25b3c2\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"black\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#25b3c2\",\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#25b3c2\",\n      },\n    },\n  },\n})(TextField);\n\nconst BlueSwitch = styled(Switch)(({ theme }) => ({\n  '& .MuiSwitch-switchBase.Mui-checked': {\n    color: '#24b3c3',\n    '&:hover': {\n      backgroundColor: alpha('#24b3c3', theme.palette.action.hoverOpacity),\n    },\n  },\n  '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {\n    backgroundColor: '#24b3c3',\n  },\n}));\n\nconst ExpandableTableRow = ({ children, expandData, expandCollapse, cellTHColor, ...otherProps }) => {\n  const [isExpanded, setIsExpanded] = React.useState(expandCollapse);\n  return (\n    <>\n      <TableRow {...otherProps} sx={{ fontSize: 14, fontFamily: '\"Montserrat\", sans-serif !important' }}>\n        {children}\n        <TableCell padding=\"checkbox\">\n          {expandData.DropdownHeader.length ? (\n            <IconButton onClick={() => setIsExpanded(!isExpanded)}>\n              {isExpanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n            </IconButton>\n          ): null}\n        </TableCell>\n      </TableRow>\n      {(expandData.DropdownHeader.length && (isExpanded || expandCollapse)) ? (\n        <>\n          <TableRow sx={{ background: '#dee3e3'}}>\n            <TableCell colSpan=\"7\" sx={{ p: 2, pb: 1, borderBottom: 'none' }}>\n              <Typography fontWeight={500} color=\"#333333\">Data Points</Typography>\n            </TableCell>\n          </TableRow>\n          <TableRow sx={{ background: '#dee3e3'}}>\n            <TableCell colSpan=\"7\" sx={{ p: 2, pt: 0 }}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    {expandData.DropdownHeader.map(th => \n                      <TableCell\n                        component={'th'} \n                        style={{\n                          fontSize: 16, \n                          fontWeight: 400, \n                          p: 1, \n                          background: cellTHColor, \n                          maxWidth: 200,\n                        }}>{th}</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {chunk(expandData.DropdownData, expandData.DropdownHeader.length).map(row =>\n                    <TableRow sx={{background: '#fff'}}>  \n                      {row.map(td => \n                        <TableCell \n                          style={{\n                            maxWidth: 220,\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                            wordBreak: 'break-all'\n                          }} \n                          component={'td'}>{td.split()}</TableCell>\n                      )}\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </TableCell>\n          </TableRow>\n        </>\n      ): null}\n    </>\n  );\n};\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = \"ascending\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"ascending\"\n    ) {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nconst downloadReport = () => {\n  const data = {}\n  axios.post(\"download\", data).then((res) => {\n    console.log(\"download\");\n  });\n};\n\nconst Report = (props) => {\n  const { reportId } = useParams();\n  const [reportResData, setReportResData] = useState([]);\n  const [severityData, setSeverityData] = useState([]);\n  const [scoreData, setScoreData] = useState([]);\n\n  const [interactionFlow, setInteractionFlow] = useState({});\n  const [fileInteractionData, setFileInteractionData] = useState([]);\n\n  const [summaryTableData, setSummaryTableData] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [tableDataSeverity, setTableDataSeverity] = useState([]);\n\n  const [name, setName] = useState(\"\");\n  const [overAllScore, setOverAllScore] = useState(0);\n  const [tool, setTool] = useState(\"\");\n  const [Pname, setPname] = useState(\"\");\n\n  const [treeMapDataForSummary, setTreeMapDataForSummary] = useState();\n\n  const [licenseExpiry, setLicenseExpiry] = useState();\n  const [workFlowAppDataFormain, setWorkFlowAppDataFormain] = useState();\n\n  // severity Array\n  const [highArr, setHighArr] = useState([]);\n  const [mediumArr, setMediumArr] = useState([]);\n  const [lowArr, setLowArr] = useState([]);\n  const [compliantArr, setCompliantArr] = useState([]);\n  const [naArr, setNaArr] = useState([]);\n\n  const [workflowDropdownData, setWorkflowDropdownData] = useState([]);\n  const [workflowDropdownValue, setWorkflowDropdownValue] = useState(\"Summary\");\n\n  const [includeNA, setIncludeNA] = useState(false);\n  // const [excludeNA, setExludeNA] = useState(false);\n  const [expandCollapse, setExpandCollapse] = useState(false);\n  const [searchText, setSearchText] = useState('');\n  const [severityCat, setSeverityCat] = useState( [\"High\", \"Medium\", \"Low\", \"Compliant\"]);\n  const [colorPallete, setColorPallete] = useState( [\"#e45d5d\", \"#f7a35c\", \"rgb(144, 237, 125)\", \"#249200\"]);\n  \n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Severity');\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [chartGridWidth, setChartGridWidth] = React.useState(4);\n\n  const severityChart = React.createRef();\n  const categoryChart = React.createRef();\n\n  const [tabValue, setTabValue] = React.useState(0);\n\n  const summaryCardItems = [\n    { label: \"Overall\", color: '#047d91'},\n    { label: \"Configurability\", color: '#4BBE9A'},\n    { label: \"Performance\", color: '#B24C63'},\n    { label: \"Readability\", color: '#A77E58'},\n    { label: \"Reliability\", color: '#001D4A'},\n    { label: \"Security\", color: '#CA3C25'},\n  ];\n  \n  const { data: reportDatas, isSuccess } = useQuery(['report', reportId], () => getReportData(reportId));\n\n  // summary table\n  const summaryTable = [];\n  if (workflowDropdownData.length > 1) {\n    workflowDropdownData.map((workflow, index) => {\n      if (workflow !== \"Summary\") {\n        summaryTable.push({\n          workFlowName: workflow,\n          overAllScores: summaryTableData[index - 1],\n        });\n      }\n    });\n  }\n\n  // workflow table----\n  const observation = [];\n  tableData.map((msg, index) => {\n    observation.push({\n      message: msg,\n      severity: tableDataSeverity[index],\n    });\n  });\n\n  // graph for pie-chart\n  let optionssec = {\n    chart: {\n      type: \"pie\",\n      height: 320,\n      options3d: {\n        enabled: true,\n        alpha: 25,\n        beta: 15,\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      layout: \"horizontal\",\n      y: 10,\n      padding: -10,\n      itemMarginTop: 5,\n      itemMarginBottom: 5,\n      itemMarginRight: 5,\n      itemStyle: {\n        lineHeight: \"10px\",\n      },\n      verticalAlign: \"bottom\",\n      align: \"center\",\n      floating: true,\n    },\n    title: {\n      text: \"\",\n    },\n    xAxis: {\n      categories: [\n        \"Configurability\",\n        \"Performance\",\n        \"Readability\",\n        \"Reliability\",\n        \"Security\",\n      ],\n      labels: {\n        skew3d: true,\n        style: {\n          fontSize: \"14px\",\n        },\n      },\n    },\n    accessibility: {\n      point: {\n        valueSuffix: \"%\",\n      },\n    },\n    tooltip: {\n      // pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>:<b>{this.point.config[2]}</b>'\n\n      formatter: function () {\n        return (\n          \" \" +\n          // this.point.name +\":\"+ parseFloat(this.point.y).toFixed(2) +\" %\" + '<br />' +\n          this.point.name +\n          \" : \" +\n          parseFloat(this.point.y).toFixed(2) +\n          \" %\" +\n          \"<br />\"\n        );\n        // 'Potential: ' + this.point.potential;\n      },\n    },\n    plotOptions: {\n      pie: {\n        allowPointSelect: true,\n        cursor: \"pointer\",\n        depth: 20,\n        innerSize: 50,\n        dataLabels: {\n          enabled: true,\n          format: \"{point.name} ({point.count})\",\n        },\n        showInLegend: false,\n      },\n    },\n    series: [\n      {\n        //   type: 'pie',\n        name: \"Severity Bugs\",\n        data: severityData,\n      },\n    ],\n  };\n\n  // graph for group column\n  const [colOptions, setColOptions] = useState({\n    chart: {\n      type: \"column\",\n      height: 320,\n      options3d: {\n        enabled: true,\n        alpha: 10,\n        beta: 10,\n        viewDistance: 25,\n        depth: 40,\n      },\n    },\n    title: {\n      text: \"\",\n    },\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      layout: \"horizontal\",\n      y: 10,\n      padding: -10,\n      itemMarginTop: 5,\n      itemMarginBottom: 5,\n      itemMarginRight: 5,\n      itemStyle: {\n        lineHeight: \"10px\",\n      },\n      verticalAlign: \"bottom\",\n      align: \"center\",\n      floating: true,\n    },\n    xAxis: {\n      categories: [\n        \"Configurability\",\n        \"Performance\",\n        \"Readability\",\n        \"Reliability\",\n        \"Security\",\n      ],\n      labels: {\n        skew3d: true,\n        style: {\n          fontSize: \"14px\",\n        },\n      },\n    },\n\n    yAxis: {\n      allowDecimals: false,\n      min: 0,\n      title: {\n        text: \"\",\n        skew3d: true,\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n\n    tooltip: {\n      headerFormat: \"<b>{point.key}</b><br>\",\n      pointFormat:\n        '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: {point.y} ',\n    },\n\n    plotOptions: {\n      column: {\n        /* stacking: 'normal', */\n        depth: 40,\n      },\n    },\n\n    series: [],\n  });\n\n  React.useEffect(() => {\n    if (highArr.length || mediumArr.length || lowArr.length || compliantArr.length || naArr.length) {\n      const _colOptions = {...colOptions};\n      _colOptions.series = [\n        {\n          name: \"High\",\n          data: highArr,\n          color: \"#e45d5d\",\n          stack: \"male\",\n        },\n        {\n          name: \"Medium\",\n          data: mediumArr,\n          color: \"#f7a35c\",\n          stack: \"male\",\n        },\n        {\n          name: \"Low\",\n          data: lowArr,\n          color: \"rgb(144, 237, 125)\",\n          stack: \"female\",\n        },\n        {\n          name: \"Compliant\",\n          data: compliantArr,\n          color: \"#249200\",\n          stack: \"female\",\n        },\n      ];\n      if (includeNA) {\n        _colOptions.series.push({\n          name: \"NA\",\n          data: naArr,\n          color: \"#6b6b6b\",\n          stack: \"female\",\n        });\n      }\n      setColOptions(_colOptions);\n    }\n  }, [highArr, mediumArr, lowArr, compliantArr, naArr])\n\n  // graph for single score\n  // const scoreGraph = {\n  //   chart: {\n  //     type: \"bar\",\n  //   },\n  //   title: {\n  //     text: \"\",\n  //   },\n  //   credits: {\n  //     enabled: false,\n  //   },\n  //   legend: {\n  //     enabled: false,\n  //   },\n  //   xAxis: {\n  //     categories: [\n  //       \"Overall\",\n  //       \"Configurability\",\n  //       \"Performance\",\n  //       \"Readability\",\n  //       \"Reliability\",\n  //       \"Security\",\n  //     ],\n  //     min: 0,\n  //     max: 5,\n  //   },\n  //   yAxis: {\n  //     title: {\n  //       text: \"Score\",\n  //     },\n  //     max: 10,\n  //   },\n  //   plotOptions: {\n  //     bar: {\n  //       dataLabels: {\n  //         enabled: true,\n  //       },\n  //       animation: {\n  //         duration: 2000,\n  //       },\n  //     },\n  //   },\n  //   series: [\n  //     {\n  //       name: \"\",\n  //       data: scoreData,\n  //     },\n  //   ],\n  // };\n\n  // org chart for file system\n  const filegraph = {\n    chart: {\n      height: 300,\n      inverted: false,\n    },\n\n    title: {\n      text: \"\",\n      // text: 'Interaction Flow'\n    },\n    credits: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        states: {\n          hover: {\n            enabled: true,\n          },\n        },\n      },\n    },\n    tooltip: { enabled: false }, // 2nd.requirmrnt done \"31 oct\"\n    series: [\n      {\n        type: \"organization\",\n        dataLabels: {\n          style: {\n            fontSize: \"1em\",\n          },\n        },\n        keys: [\"from\", \"to\", \"weight\"],\n        linkRadius: 0,\n        states: {\n          hover: {\n            color: \"#97d7e6\",\n            borderColor: \"gray\",\n            linkLineWidth: 2,\n            linkColor: \"#138e9c\",\n          },\n        },\n        data: fileInteractionData,\n        levels: [\n          {\n            level: 0,\n            color: \"silver\",\n            dataLabels: {\n              style: {\n                fontSize: \"5em\",\n                color: \"black\",\n              },\n            },\n          },\n          {\n            level: 1,\n            color: \"#138e9c\",\n            dataLabels: {\n              style: {\n                fontSize: \"5em\",\n                // color: \"white\",\n              },\n            },\n          },\n          {\n            level: 2,\n            dataLabels: {\n              style: {\n                fontSize: \"5em\",\n                color: \"black\",\n              },\n            },\n          },\n        ],\n        // nodes: fileNodes,\n        colorByPoint: false,\n        color: \"#007ad0\",\n        borderColor: \"white\",\n        nodeWidth: \"150\",\n      },\n    ],\n  };\n\n  // tree map for summary\n  const treeMapSummary = {\n    chart: {\n      height: 330,\n    },\n    colorAxis: {\n      minColor: \"#FFFFFF\",\n      maxColor: \"#138c9c\",\n    },\n    plotOptions: {\n      series: {\n        dataLabels: {\n          useHTML: true,\n          inside: true,\n          enabled: true,\n          format:\n            '{point.name}<br/><div style=\"font-size:14px;text-align:center;font-weight:300;\">TP: {point.value}</div>',\n          style: {\n            fontSize: '11px',\n          },\n        },\n      },\n    },\n    series: [{\n      type: \"treemap\",\n      layoutAlgorithm: \"squarified\",\n      data: treeMapDataForSummary,\n      minWidth: 150,\n    }],\n    title: {\n      text: \"\",\n    },\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      enabled: false,\n    },\n  };\n\n  useEffect(() => {\n    // workflow dropdown value\n    if (isSuccess) {\n      setReportResData(reportDatas);\n      const dropdownData = [];\n      const summaryTableOverallScore = [];\n      reportDatas.map((v, i) => {\n        dropdownData.push(v.DisplayName);\n        if (v.DisplayName !== \"Summary\") {\n          summaryTableOverallScore.push(v.OverallScores[0]);\n        }\n      });\n      setWorkflowDropdownData(dropdownData);\n      setSummaryTableData(summaryTableOverallScore);\n      const _summary = reportDatas[0].ApplicationList.Summary;\n      const arrs = lodashOrderBy(_summary, ['value'], ['desc']);\n      setTreeMapDataForSummary(arrs.map((v, i) => { \n        v.colorValue = i + 1;\n        return v;\n      }));\n      setLicenseExpiry(reportDatas[0].LicenseExpiry);\n\n      setFileInteractionData(reportDatas[0].fileInteractionDataSummary);\n\n      let reportData = reportDatas[0];\n      //report data for report dashboard\n      let sumTotal = reportData.OverallSeverity.reduce((aa, tot) => aa + tot);\n      let overAllCount = reportData.OverallSeverity.reduce((total, amount) => {\n        total.push((amount / sumTotal) * 100);\n        return total;\n      }, []);\n\n      optionssec.series.data = [];\n      let data = [];\n      for (let index = 0; index < severityCat.length; index++) {\n        data.push({\n          name: severityCat[index],\n          y: overAllCount[index],\n          count: parseInt(reportData.OverallSeverity[index]),\n          color: colorPallete[index],\n        });\n      }\n      setSeverityData(data);\n      let arrList = [\n        \"ConfigurabilitySeverity\",\n        \"PerformanceSeverity\",\n        \"ReadabilitySeverity\",\n        \"ReliabilitySeverity\",\n        \"SecuritySeverity\",\n      ];\n      let setArrList = [\n        setHighArr,\n        setMediumArr,\n        setLowArr,\n        setCompliantArr,\n        setNaArr,\n      ];\n      for (let index = 0; index < 5; index++) {\n        let data = arrList.map((lst) => {\n          return parseInt(reportData[lst][index]);\n        });\n        setArrList[index](data);\n      }\n\n      setInteractionFlow(reportData.InteractionFlow);\n      const scores = summaryCardItems.map((item, ind) => ({ ...item, value: reportData.OverallScores[ind] }));\n      setScoreData(scores);\n      setTableData(reportData.ObservationMessages);\n      setTableDataSeverity(reportData.ObservationSeverity);\n      setName(reportData.DevName);\n      setOverAllScore(reportData.OverallScores[0]);\n      setPname(reportData.ProjectName);\n      setTool(reportData.Tool);\n    }\n  }, [reportDatas, isSuccess, severityCat, colorPallete]);\n\n  useEffect(() => {\n    severityChart?.current?.chart?.reflow();\n    categoryChart?.current?.chart?.reflow();\n  }, [chartGridWidth]);\n  // -------------------------pdf format report download handler---------------------------\n  const savePdfReport = () => {\n    console.log(\"function called!!\");\n    let fd = new FormData();\n    fd.append(\"Pname\", Pname.trim());\n    fd.append(\"Tool\", tool.trim());\n    Promise.all([\n      htmlToImage.toPng(document.getElementById(\"cst-card-st1\"), {\n        quality: 1,\n      }),\n      htmlToImage.toPng(document.getElementById(\"cst-card-st2\"), {\n        quality: 1,\n      }),\n      htmlToImage.toPng(document.getElementById(\"cst-card-st3\"), {\n        quality: 1,\n      }),\n      htmlToImage.toPng(document.getElementById(\"cst-card-st4\"), {\n        quality: 1,\n      }),\n      htmlToImage.toPng(document.getElementById(\"cst-card-st5\"), {\n        quality: 1,\n      }),\n      htmlToImage.toPng(document.getElementById(\"overall-summary\"), {\n        quality: 1,\n        pixelRatio: 1,\n        width: 1300,\n        height: 40,\n      }),\n    ])\n      .then(function (dataUrl) {\n        let dataFile = [\n          \"SeverityCount\",\n          \"SeverityCategory\",\n          \"OverallScores\",\n          \"CompFlow\",\n          \"ObsTable\",\n          \"Summary\",\n        ];\n        // console.log(\"dataUrl\", dataUrl)\n        Promise.all([\n          fetch(dataUrl[0]),\n          fetch(dataUrl[1]),\n          fetch(dataUrl[2]),\n          fetch(dataUrl[3]),\n          fetch(dataUrl[4]),\n          fetch(dataUrl[5]),\n        ]).then(async (res) => {\n          let blob = null;\n          for (let index = 0; index < 6; index++) {\n            blob = await res[index].blob();\n\n            fd.append(dataFile[index], blob, `${dataFile[index]}.PNG`);\n          }\n\n          //   dispatch(generateReport(\"\", fd));\n        });\n      })\n      .catch((err) => {\n        console.log(\"Error constructing image\", err);\n      });\n  };\n\n  const { items, requestSort, sortConfig } = useSortableData(observation);\n\n  const handleSubmit = () => {\n    console.log([\"workflow selected!\"]);\n  };\n\n  // ---------------------------workflow dropdown handler--------------------------------\n  const workflowDropdownSelectHandler = (event) => {\n    setTabValue(0);\n    let promise = new Promise((resolve, reject) => {\n      let value = event.target.value;\n      setWorkflowDropdownValue(value);\n      const gridSize =  value === \"Summary\"? 4: 6;\n      setChartGridWidth(gridSize);\n      let reportData = reportResData.filter((currentValue, index) => {\n        return currentValue.DisplayName === value;\n      });\n      reportData.push(value);\n      resolve(reportData);\n    });\n    promise.then((reportData) => {\n      console.log(reportData[1]);\n      const _summary = reportResData[0].ApplicationList.Summary;\n      const arrs = lodashOrderBy(_summary, ['value'], ['desc']);\n      setTreeMapDataForSummary(arrs.map((v, i) => { \n        v.colorValue = i + 1;\n        return v;\n      }));\n      setWorkFlowAppDataFormain(reportData[0].WorkflowAppData);\n      //report data\n      //report data for report dashboard\n      let sumTotal = reportData[0].OverallSeverity.reduce(\n        (aa, tot) => aa + tot\n      );\n      let overAllCount = reportData[0].OverallSeverity.reduce(\n        (total, amount) => {\n          total.push((amount / sumTotal) * 100);\n          return total;\n        },\n        []\n      );\n      optionssec.series.data = [];\n      let data = [];\n      for (let index = 0; index < severityCat.length; index++) {\n        data.push({\n          name: severityCat[index],\n          y: overAllCount[index],\n          count: parseInt(reportData[0].OverallSeverity[index]),\n          color: colorPallete[index],\n        });\n      }\n      setSeverityData(data);\n      let arrList = [\n        \"ConfigurabilitySeverity\",\n        \"PerformanceSeverity\",\n        \"ReadabilitySeverity\",\n        \"ReliabilitySeverity\",\n        \"SecuritySeverity\",\n      ];\n      let setArrList = [\n        setHighArr,\n        setMediumArr,\n        setLowArr,\n        setCompliantArr,\n        setNaArr,\n      ];\n      for (let index = 0; index < 5; index++) {\n        let data = arrList.map((lst) => {\n          return parseInt(reportData[0][lst][index]);\n        });\n        setArrList[index](data);\n      }\n\n      const nuevo = reportData[0].OverallScores.map((i) => Number(i));\n      const scores = summaryCardItems.map((item, ind) => ({ ...item, value: nuevo[ind] }));\n      setScoreData(scores);\n\n      if (reportData[1] !== \"Summary\") {\n        const interactionFlowData = reportData[1];\n        console.log(\"interaction flow chart data\", interactionFlowData);\n\n        let nodeData = [];\n        let nodes = [];\n\n        let parentNode = reportData[1].split(\".\");\n\n        console.log(\"parentNode\", parentNode);\n\n        nodes.push({\n          id: parentNode[0],\n          title: parentNode[0],\n          name: parentNode[0],\n          dataLabels: {\n            enabled: true,\n            style: {\n              fontSize: \"12px\",\n            },\n          },\n        });\n        let rootNode = interactionFlow[interactionFlowData];\n        console.log(\"interactionFlow\", rootNode);\n\n        rootNode.forEach((t) => {\n          let len = t.split(\".\");\n\n          nodeData.push([parentNode[0], len[0]]);\n\n          nodes.push({\n            id: len[0],\n            title: len[0],\n            name: len[0],\n            dataLabels: {\n              enabled: true,\n              style: {\n                fontSize: \"12px\",\n              },\n            },\n          });\n        });\n\n        setFileInteractionData(nodeData);\n      } else {\n        setFileInteractionData(reportData[0].fileInteractionDataSummary);\n      }\n\n      Promise.all([\n        setTableData(reportData[0].ObservationMessages),\n        setTableDataSeverity(reportData[0].ObservationSeverity),\n      ]).then(() => {\n        console.log(\"Promise resolved\");\n      });\n    });\n  };\n\n  const handleNAInclude = (event) => {\n    setIncludeNA(event.target.checked);\n    const _severityCat = [...severityCat];\n    const _colorPallete = [...colorPallete];\n    if (event.target.checked) {\n      _severityCat.push(\"NA\");\n      _colorPallete.push(\"#6b6b6b\");\n    } else {\n      _severityCat.pop();\n      _colorPallete.pop();\n    }\n    setSeverityCat(_severityCat);\n    setColorPallete(_colorPallete);\n  }\n\n  const getFilteredDashboardData = () => {\n    let dashboardData = [...reportResData]?.filter(f => f.DisplayName === workflowDropdownValue)[0]?.DetailedDashboard;\n    if (!includeNA) {\n      dashboardData = dashboardData.filter(d => d.Severity !== \"NA\");\n    }\n    if (searchText) {\n      const _searchText = searchText.toLowerCase();\n      dashboardData = dashboardData.filter(d => {\n        return d.RuleID.toLowerCase().includes(_searchText) || d.RuleCategory.toLowerCase().includes(_searchText) \n          || d.RuleName.toLowerCase().includes(_searchText) || d.Severity.toLowerCase().includes(_searchText) \n          || d.ObservationMessages.toLowerCase().includes(_searchText) || d.Suggestion.toLowerCase().includes(_searchText);\n      });\n    }\n    return dashboardData;\n  }\n\n  const getCellColor = (severity) => {\n    let color = null;\n    switch (severity) {\n      case 'High':\n        color = '#e45d5d';\n        break;\n      case 'Medium':\n        color = '#f7a35c';\n        break;\n      case 'Low':\n        color = '#563db9';\n        break;\n      case 'Compliant':\n        color = '#0b7900';\n        break;\n      default:\n        color = '#6b6b6b';\n        break;\n    }\n    return color;\n  }\n\n  // const handleNAExclude = (event) => {\n  //   setExludeNA(event.target.checked);\n  // }\n\n  const handleExpandCollapse = (event) => {\n    setExpandCollapse( event.target.checked);\n  }\n\n  const handleSearchText = (event) => {\n    setSearchText(event.target.value);\n  }\n\n  function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n  \n  function getComparator(order, orderBy) {\n    return order === 'desc'\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n  \n  function mapOrder (array, order, key) {\n    array.sort( function (a, b) {\n      var A = a[key], B = b[key];\n      if (order.indexOf(A) > order.indexOf(B)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    return array;\n  };\n\n  // This method is created for cross-browser compatibility, if you don't\n  // need to support IE11, you can use Array.prototype.sort() directly\n  function stableSort(array, comparator) {\n    let stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) {\n        return order;\n      }\n      return a[1] - b[1];\n    });\n    if (orderBy === \"Severity\") {\n      let sortOrder = [\"High\", \"Medium\", \"Low\", \"Compliant\", \"NA\"];\n      if (order === \"desc\") {\n        sortOrder = sortOrder.reverse();\n      } \n      stabilizedThis = mapOrder(array, sortOrder, orderBy);\n      return stabilizedThis;\n    }\n    return stabilizedThis.map((el) => el[0]);\n  }\n\n  const createSortHandler = (property) => (event) => {\n    handleRequestSort(event, property);\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  return (\n    <Box mt={12} mb={8}>\n      {!reportResData?.length ?\n        <Box position={'absolute'} top={200} left={'45%'}>\n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            <Typography variant=\"h6\" color={'#047d91'} mb={2}>Loading report...</Typography>\n          </Box>\n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress sx={{color: '#047d91'}} />\n          </Box>\n        </Box>\n      :\n        <>\n          <Box className=\"smry-parent\" id=\"overall-summary\">\n            <Typography variant=\"subtitle1\" component={'span'} mr={3} textAlign=\"center\" fontWeight={'500'}>\n              <Tooltip title={'User'}><PersonIcon sx={{color: \"#047d91\", fontSize: \"28px\"}} /></Tooltip> {name}\n            </Typography>\n            <Box component={'span'} sx={{borderRight: \"1px solid #cccccc\", mr: 3}} />\n            <Typography variant=\"subtitle1\" component={'span'} mr={3} textAlign=\"center\" fontWeight={'500'}>\n              <Tooltip title={'Project'}><ProjectIcon sx={{color: \"#047d91\", fontSize: \"28px\"}} /></Tooltip> {Pname}\n            </Typography>\n            <Box component={'span'} sx={{borderRight: \"1px solid #cccccc\", mr: 3}} />\n            <Typography variant=\"subtitle1\" component={'span'} mr={3} textAlign=\"center\" fontWeight={'500'}>\n              <Tooltip title={'Tool'}><ToolIcon sx={{color: \"#047d91\", fontSize: \"28px\"}} /></Tooltip> {tool}\n            </Typography>\n            <Box component={'span'} sx={{borderRight: \"1px solid #cccccc\", mr: 3}} />\n            <Typography variant=\"subtitle1\" component={'span'} mr={3} textAlign=\"center\" fontWeight={'500'}>\n              <Tooltip title={'Overall Score'}><OverallScoreIcon sx={{color: \"#047d91\", fontSize: \"28px\"}} /></Tooltip> {overAllScore}\n            </Typography>\n            <Box component={'span'} sx={{borderRight: \"1px solid #cccccc\", mr: 3}} />\n            <Typography variant=\"subtitle1\" component={'span'} mr={3} textAlign=\"center\" fontWeight={'500'}>\n              <Tooltip title={'Rules Run'}><RunRulesIcon sx={{color: \"#047d91\", fontSize: \"28px\"}} /></Tooltip> {props.activeRuleForReportPage || 58} out of 58 Rules Run\n            </Typography>\n            {/* <Typography \n              variant=\"subtitle1\"\n              className=\"download-button-on-report\"\n              sx={{ float: \"right\" }}\n              fontWeight={'500'}\n              onClick={downloadReport}\n            >\n              <GetAppIcon sx={{ fontSize: \"28px\", color: \"#047d91\" }} />\n              Export Reports\n            </Typography> */}\n            <Box display={'flex'} flexDirection=\"row\" justifyContent={'space-between'}>\n              <Box className=\"workflow-dropdown\" minWidth={450}>\n                <CssTextField\n                  select\n                  label=\"Workflow Filter\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  name=\"workflow\"\n                  value={workflowDropdownValue}\n                  style={{ backgroundColor: \"#fff\" }}\n                  onChange={workflowDropdownSelectHandler}\n                >\n                  {workflowDropdownData &&\n                    workflowDropdownData.map((v, i) => {\n                      return <MenuItem key={i} value={v}>{v}</MenuItem>;\n                    })}\n                </CssTextField>\n              </Box>\n              <Box mt={3}>\n                <FormGroup aria-label=\"position\" row>\n                  <FormControlLabel\n                    value={includeNA}\n                    control={<BlueSwitch />}\n                    label=\"Include NA\"\n                    labelPlacement=\"start\"\n                    onChange={handleNAInclude}\n                  />\n                </FormGroup>\n              </Box>\n            </Box>\n          </Box>\n          \n          <Grid container spacing={3} pl={.5}>\n            {scoreData.map((score, ind) =>\n              <Grid key={ind} item sm={2} sx={{mt: 2}}>\n                <Box display={'flex'} position=\"relative\">\n                  <Box sx={{height: 60, width: 60, borderRadius: '50%', zIndex: 100, background: score.color}}>\n                    <Typography variant=\"body2\" fontSize={17} color=\"#fff\" textAlign=\"center\" pt={2.2}>\n                      {score.value}\n                    </Typography>\n                  </Box>\n                  <Box \n                    sx={{background: '#cfcfcf', position: 'absolute', pl: 4.3, pr: 1, left: 35, \n                      top: 5, height: 50, minWidth: 140, zIndex: 10, pt: 1.8, color: '#000',\n                      borderRadius: '0px 30px 30px 0px'\n                    }}>\n                    <Typography variant=\"body1\" fontSize={14}>\n                      {score.label}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Grid>\n            )}\n          </Grid>\n\n          <Box mt={2} mb={3}>\n            <Paper sx={{ display: workflowDropdownValue !== \"Summary\"? 'inline-flex': 'none'}}>\n              <Tabs \n                sx={{ \n                  '&.MuiTabs-root .css-1aquho2-MuiTabs-indicator': { backgroundColor: '#62cbdc' }, \n                }} \n                value={tabValue} onChange={handleTabChange} aria-label=\"report menu tabs\">\n                <Tab label=\"Overview\" \n                  sx={{\n                    '&.MuiTab-root.Mui-selected': { color: '#62cbdc', boxShadow: '0px 8px 15px rgba(0, 0, 0, 0.1)' },\n                    minWidth: '160px'\n                  }} \n                />\n                <Tab label=\"Details\" \n                  sx={{\n                    '&.MuiTab-root.Mui-selected': { color: '#62cbdc', boxShadow: '3px 8px 25px rgba(0, 0, 0, 0.1)' },\n                    minWidth: '160px'\n                  }} \n                />\n              </Tabs>\n            </Paper>\n          </Box>\n\n          {tabValue === 0 && (\n            <>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid item sm={chartGridWidth} sx={{pt: 0}}>\n                  <Card>\n                    <Card.Header>NUMBER OF OBSERVATIONS BY SEVERITY</Card.Header>\n                    <Card.Body>\n                      <HighchartsReact ref={categoryChart} highcharts={Highcharts} options={optionssec} />\n                    </Card.Body>\n                  </Card>\n                </Grid>\n                <Grid item sm={chartGridWidth} sx={{pt: 0}}>\n                  <Card>\n                    <Card.Header>OBSERVATION SEVERITY BY CATEGORY</Card.Header>\n                    <Card.Body>\n                      <HighchartsReact ref={severityChart} highcharts={Highcharts} options={colOptions} />\n                    </Card.Body>\n                  </Card>\n                </Grid>\n                {workflowDropdownValue === \"Summary\" &&\n                  <Grid item sm={4} sx={{pt: 0}}>\n                    <Card>\n                      <Card.Header>\n                        <Tooltip title=\"A summary version of each workflow in the project with its Overall Score.\">\n                          <IconButton style={{float: \"Right\", padding: \"0px 0px 10px 0px\" }}>\n                            <InfoOutlinedIcon style={{color: \"#000000\"}} />\n                          </IconButton>\n                        </Tooltip>\n                        WORKFLOW INSIGHT\n                      </Card.Header>\n                      <Card.Body className=\"table-msgs\" style={{ height: 340, overflowY: 'auto' }}>\n                        <Table responsive=\"lg\" style={{ width: \"100%\", margin: \"0\" }}>\n                          <thead>\n                            <tr>\n                              <th style={{padding:\"0px 0px 5px 9px\"}}>Workflow Name</th>\n                              <th\n                                style={{ cursor: \"pointer\", textAlign: \"center\" }}\n                                onClick={() => requestSort(\"severity\")}\n                              >\n                                <span style={{ marginRight: \"10px\" }}>Overall Scores</span>{\" \"}\n                              </th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {summaryTable.map((workflow, index) => {\n                              const { workFlowName, overAllScores } = workflow;\n                              return (\n                                <tr key={index}>\n                                  <td width={800}>{workFlowName}</td>\n                                  <td style={{ textAlign: \"center\" }}>{overAllScores} </td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </Table>\n                      </Card.Body>\n                    </Card>\n                  </Grid>\n                }\n              </Grid>\n\n              {/* <Card className=\"sec-graph\" id=\"cst-card-st3\">\n                <Card.Header>\n                  <Tooltip title=\"The metrics below show the average scores distribution(out of 10) across the 5 major categories.\">\n                    <IconButton style={{float: \"Right\", padding: \"0px 0px 10px 0px\" }}>\n                      <InfoOutlinedIcon style={{color: \"#000000\"}} />\n                    </IconButton>\n                  </Tooltip>\n                  BOT REVIEW SCORE BY CATEGORY\n                </Card.Header>\n                <Card.Body>\n                  <HighchartsReact highcharts={Highcharts} options={scoreGraph} />\n                </Card.Body>\n              </Card> */}\n\n              <Grid container spacing={3} sx={{ mb: 3 }}>\n                <Grid item sm={6} sx={{pt: 0}}>\n                  {workflowDropdownValue === \"Summary\" ? (\n                    <Card style={{ marginBottom: \"20px\" }}>\n                      <Card.Header>\n                        <Tooltip title=\"The cards shows the frequency of the applications used in the entire project.\">\n                          <IconButton style={{float: \"Right\", padding: \"0px 0px 10px 0px\" }}>\n                            <InfoOutlinedIcon style={{color: \"#000000\"}} />\n                          </IconButton>\n                        </Tooltip>\n                        APPLICATION TREE\n                      </Card.Header>\n                      <Card.Body style={{ minHeight: 320, padding: 0, position: 'relative' }}>\n                        {treeMapDataForSummary && treeMapDataForSummary.length === 0 && (\n                          <h5 \n                            style={{ \n                              color: \"#138d9c\", \n                              textAlign: \"center\",\n                              position: 'absolute',\n                              top: '45%', \n                              left: 10, \n                              right: 10, \n                            }}>\n                            <strong>Note</strong>: There are no applications used in the project.\n                          </h5>\n                        )}\n                        {treeMapDataForSummary && treeMapDataForSummary.length > 0 && (\n                          <HighchartsReact\n                            highcharts={Highcharts}\n                            options={treeMapSummary}\n                          />\n                        )}\n                      </Card.Body>\n                    </Card>\n                  ): (\n                    <Card className=\"sec-graph\" id=\"cst-card-st3\">\n                      <Card.Header>\n                        <Tooltip title=\"The section below shows the unique applications used in this workflow.\">\n                          <IconButton style={{float: \"Right\", padding: \"0px 0px 10px 0px\" }}>\n                            <InfoOutlinedIcon style={{color: \"#000000\"}} />\n                          </IconButton>\n                        </Tooltip>\n                        APPLICATION LIST\n                      </Card.Header>\n                      <Card.Body style={{ minHeight: 330, position: 'relative' }}>\n                        {workFlowAppDataFormain && workFlowAppDataFormain.length === 0 && (\n                          <h5\n                            style={{\n                              color: \"#138d9c\",\n                              textAlign: \"center\",\n                              paddingBottom: \"20px\",\n                              position: 'absolute',\n                              top: '45%', \n                              left: 10, \n                              right: 10,\n                            }}\n                          >\n                            <strong>Note</strong>: There are no applications used in this workflow\n                          </h5>\n                        )}\n                        <Grid container spacing={3} sx={{p: 3}}>\n                          {workFlowAppDataFormain &&\n                            workFlowAppDataFormain.map((value, indx) => {\n                              return (\n                                <Grid key={indx} items sm={3}>\n                                  <div\n                                    className=\"workflow-App-Data-css\"\n                                    style={{\n                                      backgroundColor: \"#25b3c2\",\n                                      margin: \"20px\",\n                                      textAlign: \"center\",\n                                      padding: \"10px\",\n                                      color: \"#fff\",\n                                      minHeight: 70,\n                                      verticalAlign: 'middle',\n                                    }}\n                                  >\n                                    <Typography>{value}</Typography>\n                                  </div>\n                                </Grid>\n                              );\n                            })}\n                        </Grid>\n                      </Card.Body>\n                    </Card>\n                  )}\n                </Grid>\n                <Grid item sm={6} sx={{pt: 0}}>\n                  <Card className=\"third-graph\" id=\"cst-card-st4\">\n                    <Card.Header>\n                      <Tooltip title=\"The tree below is a drill down that depicts a parent-child between workflows.\">\n                        <IconButton style={{float: \"Right\", padding: \"0px 0px 10px 0px\" }}>\n                          <InfoOutlinedIcon style={{color: \"#000000\"}} />\n                        </IconButton>\n                      </Tooltip>\n                      INTERACTION FLOW\n                    </Card.Header>\n                    <Card.Body style={{ minHeight: 330, position: 'relative' }}>\n                      {fileInteractionData.length === 0 && (\n                        <h5 \n                          style={{ \n                            color: \"#138d9c\", \n                            textAlign: \"center\", \n                            position: 'absolute', \n                            top: '45%', \n                            left: 10, \n                            right: 10 \n                          }}>\n                          <strong>Note</strong>: Not enough data to generate an Interaction Flow chart.\n                        </h5>\n                      )}\n                      {fileInteractionData.length > 0 && (\n                        <HighchartsReact highcharts={Highcharts} options={filegraph} />\n                      )}\n                    </Card.Body>\n                  </Card>\n                </Grid>\n              </Grid>\n            </>\n          )}\n\n          {tabValue === 1 && workflowDropdownValue !== \"Summary\" && (\n            <Box mt={3} mb={3}>\n              <Card>\n                <Grid container justifyContent={'space-between'} p={2} pb={1} alignItems=\"center\">\n                  <Grid item>\n                    <Typography fontWeight={500} color=\"#333333\">DETAILED DASHBOARD</Typography>\n                  </Grid>\n                  <Grid item>\n                    <TextField\n                      label=\"Search here...\"\n                      id=\"outlined-size-small\"\n                      value={searchText}\n                      size=\"small\"\n                      sx={{width: 320}}\n                      onChange={handleSearchText}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Grid container>\n                      <FormGroup aria-label=\"position\" row>\n                        <FormControlLabel\n                          value={expandCollapse}\n                          control={<BlueSwitch />}\n                          label=\"Expand All\"\n                          labelPlacement=\"start\"\n                          onChange={handleExpandCollapse}\n                        />\n                      </FormGroup>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              <TableContainer component={Paper} sx={{ mb:1 }}>\n                <Table className=\"details-table\" stickyHeader={true} sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell component=\"th\" width={'10%'} sx={{fontSize: 16, fontWeight: 400, p: 1}}>\n                        <TableSortLabel\n                          active={orderBy === 'RuleID'}\n                          direction={orderBy === 'RuleID' ? order : 'asc'}\n                          onClick={createSortHandler('RuleID')}\n                          sx={{\n                            '&.MuiTableSortLabel-root': { color: '#fff' },\n                            '&.MuiTableSortLabel-root:hover': { color: '#fff' },\n                            '&.Mui-active': { color: '#fff' },\n                            '& .MuiTableSortLabel-icon': { color: '#fff !important' },\n                          }}\n                        >\n                          Rule ID\n                          {orderBy === 'RuleID' ? (\n                            <Box component=\"span\" sx={visuallyHidden}>\n                              {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                            </Box>\n                          ) : null}\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell component=\"th\" width={'12%'} sx={{fontSize: 16, fontWeight: 400, p: 1}}>\n                        <TableSortLabel\n                          active={orderBy === 'RuleCategory'}\n                          direction={orderBy === 'RuleCategory' ? order : 'asc'}\n                          onClick={createSortHandler('RuleCategory')}\n                          sx={{\n                            '&.MuiTableSortLabel-root': { color: '#fff' },\n                            '&.MuiTableSortLabel-root:hover': { color: '#fff' },\n                            '&.Mui-active': { color: '#fff' },\n                            '& .MuiTableSortLabel-icon': { color: '#fff !important' },\n                          }}\n                        >\n                          Category\n                          {orderBy === 'RuleCategory' ? (\n                            <Box component=\"span\" sx={visuallyHidden}>\n                              {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                            </Box>\n                          ) : null}\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell component=\"th\" width={'25%'} sx={{fontSize: 16, fontWeight: 400, p: 1}}>\n                        <TableSortLabel\n                          active={orderBy === 'RuleName'}\n                          direction={orderBy === 'RuleName' ? order : 'asc'}\n                          onClick={createSortHandler('RuleName')}\n                          sx={{\n                            '&.MuiTableSortLabel-root': { color: '#fff' },\n                            '&.MuiTableSortLabel-root:hover': { color: '#fff' },\n                            '&.Mui-active': { color: '#fff' },\n                            '& .MuiTableSortLabel-icon': { color: '#fff !important' },\n                          }}\n                        >\n                          Rule\n                          {orderBy === 'RuleName' ? (\n                            <Box component=\"span\" sx={visuallyHidden}>\n                              {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                            </Box>\n                          ) : null}\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell component=\"th\" align=\"center\" sx={{fontSize: 16, fontWeight: 400, p: 1}}>\n                        <TableSortLabel\n                          active={orderBy === 'Severity'}\n                          direction={orderBy === 'Severity' ? order : 'asc'}\n                          onClick={createSortHandler('Severity')}\n                          sx={{\n                            '&.MuiTableSortLabel-root': { color: '#fff' },\n                            '&.MuiTableSortLabel-root:hover': { color: '#fff' },\n                            '&.Mui-active': { color: '#fff' },\n                            '& .MuiTableSortLabel-icon': { color: '#fff !important' },\n                          }}\n                        >\n                          Severity\n                          {orderBy === 'Severity' ? (\n                            <Box component=\"span\" sx={visuallyHidden}>\n                              {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                            </Box>\n                          ) : null}\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell component=\"th\" width={'25%'} sx={{fontSize: 16, fontWeight: 400, p: 1, maxWidth: 300}}>\n                        <TableSortLabel\n                          active={orderBy === 'ObservationMessages'}\n                          direction={orderBy === 'ObservationMessages' ? order : 'asc'}\n                          onClick={createSortHandler('ObservationMessages')}\n                          sx={{\n                            '&.MuiTableSortLabel-root': { color: '#fff' },\n                            '&.MuiTableSortLabel-root:hover': { color: '#fff' },\n                            '&.Mui-active': { color: '#fff' },\n                            '& .MuiTableSortLabel-icon': { color: '#fff !important' },\n                          }}\n                        >\n                          Observation Messages\n                          {orderBy === 'ObservationMessages' ? (\n                            <Box component=\"span\" sx={visuallyHidden}>\n                              {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                            </Box>\n                          ) : null}\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell component=\"th\" width={'28%'} sx={{fontSize: 16, fontWeight: 400, p: 1, maxWidth: 300}}>\n                        <TableSortLabel\n                          active={orderBy === 'Suggestion'}\n                          direction={orderBy === 'Suggestion' ? order : 'asc'}\n                          onClick={createSortHandler('Suggestion')}\n                          sx={{\n                            '&.MuiTableSortLabel-root': { color: '#fff' },\n                            '&.MuiTableSortLabel-root:hover': { color: '#fff' },\n                            '&.Mui-active': { color: '#fff' },\n                            '& .MuiTableSortLabel-icon': { color: '#fff !important' },\n                          }}\n                        >\n                          Suggestion\n                          {orderBy === 'Suggestion' ? (\n                            <Box component=\"span\" sx={visuallyHidden}>\n                              {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                            </Box>\n                          ) : null}\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell padding=\"checkbox\" />\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {stableSort(getFilteredDashboardData(), getComparator(order, orderBy))\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((row) => (\n                      <ExpandableTableRow\n                        key={row.RuleName}\n                        expandData={row}\n                        expandCollapse={expandCollapse}\n                        cellTHColor={getCellColor(row.Severity)}\n                      >\n                        <TableCell component=\"th\" scope=\"row\">{row?.RuleID}</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">{row?.RuleCategory}</TableCell>\n                        <TableCell component=\"th\" scope=\"row\">{row?.RuleName}</TableCell>\n                        <TableCell component=\"td\" align=\"center\">\n                          <Chip label={row.Severity} sx={{ bgcolor: getCellColor(row.Severity), color: '#fff', minWidth: 110 }}></Chip>\n                        </TableCell>\n                        <TableCell component=\"td\">{row.ObservationMessages}</TableCell>\n                        <TableCell component=\"td\">{row.Suggestion}</TableCell>\n                      </ExpandableTableRow>\n                    ))}\n                    {getFilteredDashboardData().length === 0 &&\n                      <TableRow>\n                        <TableCell colSpan=\"8\" align=\"center\">No record found!</TableCell>\n                      </TableRow>\n                    }\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[10, 25, 50]}\n                component=\"div\"\n                count={getFilteredDashboardData().length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                sx={{\n                  '&.MuiToolbar-root': { minHeight: 50 },\n                  '& .MuiTablePagination-toolbar': { minHeight: 50 },\n                  '& .MuiTablePagination-displayedRows': { marginBottom: 0 },\n                  '& .MuiTablePagination-selectLabel': { marginBottom: 0 },\n                }}\n              />\n              </Card>\n            </Box>\n          )}\n        </>\n      }\n    </Box>\n  );\n};\n\nexport default Report;\n","R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\services\\AxiosOrder.js",[],"R:\\Mindfields-Inhouse\\MindEzy-COT\\CMI-Report14thSept2022\\src\\services\\Api.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":40,"nodeType":"57","messageId":"58","endLine":2,"endColumn":48},{"ruleId":"55","severity":1,"message":"59","line":20,"column":8,"nodeType":"57","messageId":"58","endLine":20,"endColumn":18},{"ruleId":"55","severity":1,"message":"60","line":28,"column":49,"nodeType":"57","messageId":"58","endLine":28,"endColumn":58},{"ruleId":"55","severity":1,"message":"61","line":195,"column":7,"nodeType":"57","messageId":"58","endLine":195,"endColumn":21},{"ruleId":"55","severity":1,"message":"62","line":222,"column":10,"nodeType":"57","messageId":"58","endLine":222,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":267,"column":48,"nodeType":"65","messageId":"66","endLine":267,"endColumn":50},{"ruleId":"63","severity":1,"message":"64","line":279,"column":30,"nodeType":"65","messageId":"66","endLine":279,"endColumn":32},{"ruleId":"67","severity":1,"message":"68","line":432,"column":5,"nodeType":"69","messageId":"70","endLine":432,"endColumn":12},{"ruleId":"71","severity":1,"message":"72","line":491,"column":6,"nodeType":"73","endLine":491,"endColumn":55,"suggestions":"74"},{"ruleId":"63","severity":1,"message":"64","line":672,"column":30,"nodeType":"65","messageId":"66","endLine":672,"endColumn":32},{"ruleId":"71","severity":1,"message":"75","line":740,"column":6,"nodeType":"73","endLine":740,"endColumn":57,"suggestions":"76"},{"ruleId":"71","severity":1,"message":"77","line":745,"column":6,"nodeType":"73","endLine":745,"endColumn":22,"suggestions":"78"},{"ruleId":"55","severity":1,"message":"79","line":747,"column":9,"nodeType":"57","messageId":"58","endLine":747,"endColumn":22},{"ruleId":"55","severity":1,"message":"80","line":808,"column":11,"nodeType":"57","messageId":"58","endLine":808,"endColumn":16},{"ruleId":"55","severity":1,"message":"81","line":808,"column":31,"nodeType":"57","messageId":"58","endLine":808,"endColumn":41},{"ruleId":"55","severity":1,"message":"82","line":810,"column":9,"nodeType":"57","messageId":"58","endLine":810,"endColumn":21},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'GetAppIcon' is defined but never used.","'Container' is defined but never used.","'downloadReport' is assigned a value but never used.","'licenseExpiry' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'credits'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'colOptions' and 'includeNA'. Either include them or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has missing dependencies: 'optionssec.series' and 'summaryCardItems'. Either include them or remove the dependency array.",["86"],"React Hook useEffect has missing dependencies: 'categoryChart' and 'severityChart'. Either include them or remove the dependency array.",["87"],"'savePdfReport' is assigned a value but never used.","'items' is assigned a value but never used.","'sortConfig' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [highArr, mediumArr, lowArr, compliantArr, naArr, colOptions, includeNA]",{"range":"94","text":"95"},"Update the dependencies array to be: [reportDatas, isSuccess, severityCat, colorPallete, optionssec.series, summaryCardItems]",{"range":"96","text":"97"},"Update the dependencies array to be: [categoryChart, chartGridWidth, severityChart]",{"range":"98","text":"99"},[14176,14225],"[highArr, mediumArr, lowArr, compliantArr, naArr, colOptions, includeNA]",[20151,20202],"[reportDatas, isSuccess, severityCat, colorPallete, optionssec.series, summaryCardItems]",[20321,20337],"[categoryChart, chartGridWidth, severityChart]"]